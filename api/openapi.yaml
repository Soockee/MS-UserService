openapi: 3.0.0
info:
  contact:
    email: simon.stockhause@mni.thm.de
    name: Microservice SS21 TEAM Björn Franke, Simon Stockhause, Dennis Appel, Henrik
      Huller
  description: By Björn Franke, Simon Stockhause, Dennis Appel, Henrik Huller
  title: User-Service Microservice SS21
  version: "1.0"
servers:
- description: User-Service
  url: http://localhost:13331
tags:
- name: user
paths:
  /user:
    post:
      description: With this endpoint it is possible to create a new user.
      operationId: post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          content:
            application/json:
              examples:
                'Successful Response: 201':
                  value: Created user successfully
              schema:
                type: string
          description: Created
        "400":
          content:
            application/json:
              examples:
                BadRequest 400:
                  value: Invalid body. It needs to be in json format.
              schema:
                type: string
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                'Forbidden: 403':
                  value: You don't have the permission to access the requested resource.
                    It is either read-protected or not readable by the server.
              schema:
                type: string
          description: Forbidden
      security:
      - JWT: []
      tags:
      - user
    get:
      description: This endpoint represents all user.
      operationId: get_users
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  value:
                    data:
                    - guid: "101010"
                      username: Peter
                    - guid: "101010"
                      username: Hans
                    pagination:
                      total: 2
              schema:
                $ref: '#/components/schemas/Users_200'
          description: Return an array which contains all users
      summary: GET all users
      tags:
      - user
  /user/{userguid}:
    get:
      description: This endpoint represents a individual user. A user is identified
        by his guid.
      operationId: get_user_by_guid
      parameters:
      - explode: false
        in: path
        name: userguid
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
      summary: Get user by guid
      tags:
      - user
    put:
      description: This endpoint updates a individual user. A user is identified
        by his guid.
      operationId: put_user_by_guid
      parameters:
      - explode: false
        in: path
        name: userguid
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          content:
            application/json:
              examples:
                'Successful Response: 200':
                  value: updated user successfully
              schema:
                type: string
          description: updated
      summary: update user by guid
      tags:
      - user
    delete:
      description: This endpoint deletes a individual user. A user is identified
        by his guid.
      operationId: delete_user_by_guid
      parameters:
      - explode: false
        in: path
        name: userguid
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          content:
            application/json:
              examples:
                'Successful Response: 204':
                  value: delete user successfully
              schema:
                type: string
          description: delete
      summary: delete user by guid
      tags:
      - user
components:
  responses:
    Users_Get_200:
      content:
        application/json:
          examples:
            example-1:
              value:
                data:
                - guid: "101010"
                  username: Peter
                - guid: "202020"
                  username: Hans
                pagination:
                  total: 2
          schema:
            $ref: '#/components/schemas/Users_200'
      description: Return an array which contain all users
  schemas:
    User:
      description: An User
      example:
        username: hans
        guid: 0
      properties:
        guid:
          title: guid
          type: string
        username:
          title: username
          type: string
      required:
      - guid
      - username
      title: User
      type: object
      x-examples:
        example:
          guid: "101010"
          username: Hans
    Users_200_pagination:
      example:
        total: 0
      properties:
        total:
          title: total
          type: integer
      required:
      - total
      title: users_200_pagination
      type: object
      x-examples:
        example-1:
          total: 3
    Users_200:
      description: represents return of GET /users
      example:
        pagination:
          total: 0
        data:
        - username: hans
          guid: "101010"
        - username: peter
          guid: "101011"
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
        pagination:
          $ref: '#/components/schemas/Users_200_pagination'
      required:
      - data
      - pagination
      title: Users_200
      type: object
      x-examples:
        example-1:
          value:
            data:
            - guid: "101010"
              username: Peter
            - guid: "101011"
              username: Hans
            pagination:
              total: 2
  # securitySchemes:
  #   JWT:
  #     bearerFormat: JWT
  #     scheme: bearer
  #     type: http
  #     x-bearerInfoFunc: openapi_server.controllers.security_controller_.info_from_JWT

